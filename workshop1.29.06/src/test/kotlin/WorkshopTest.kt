import org.example.Product
import kotlin.test.Test
import kotlin.test.assertEquals
import org.example.celsiusToFahrenheit
import org.example.kilometersToMiles
import org.example.calculateTotalElectronicsPriceOver500
import org.example.countElectronicsOver500


class WorkshopTest {

    val products = listOf(
        Product("Laptop", 35000.0, "Electronics"),
        Product("Smartphone", 25000.0, "Electronics"),
        Product("T-shirt", 450.0, "Apparel"),
        Product("Monitor", 7500.0, "Electronics"),
        Product("Keyboard", 499.0, "Electronics"), // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500
        Product("Jeans", 1200.0, "Apparel"),
        Product("Headphones", 1800.0, "Electronics")  // ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    )

    // --- Tests for Workshop #1: Unit Converter ---

    // celsius input: 20.0
    // expected output: 68.0
    @Test
    fun `test celsiusToFahrenheit with positive value`() {
        // Arrange: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ input ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
        val celsiusInput = 20.0
        val expectedFahrenheit = 68.0

        // Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        val actualFahrenheit = celsiusToFahrenheit(celsiusInput)
        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
        assertEquals(expectedFahrenheit, actualFahrenheit, 0.001, "20¬∞C should be 68¬∞F")
    }

    // celsius input: 0.0
    // expected output: 32.0
    @Test
    fun `test celsiusToFahrenheit with zero`() {
        // Act
        val actualFahrenheit = celsiusToFahrenheit(0.0)
        // Assert
        assertEquals(32.0, actualFahrenheit, 0.001, "0¬∞C should be 32¬∞F")
    }

    // celsius input: -10.0
    // expected output: 14.0
    @Test
    fun `test celsiusToFahrenheit with negative value`() {
        // Act
        val actualFahrenheit = celsiusToFahrenheit(-10.0)
        // Assert
        assertEquals(14.0, actualFahrenheit, 0.001, "-10¬∞C should be 14¬∞F")

    }

    // test for kilometersToMiles function
    // kilometers input: 1.0
    // expected output: 0.621371
    @Test
    fun `test kilometersToMiles with one kilometer`() {
        // Act
        val actualMiles = kilometersToMiles(1.0)
        // Assert
        assertEquals(0.621371, actualMiles, 0.000001, "1 km should be ~0.621371 miles")
    }

    // --- Tests for Workshop #2: Data Analysis Pipeline ---

    // ‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô test cases ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ > 500 ‡∏ö‡∏≤‡∏ó
    @Test
    fun `test calculateTotalElectronicsPriceOver500`() {
        val products = listOf(
            Product("Laptop", 600.0, "Electronics"),
            Product("Mouse", 50.0, "Electronics"),
            Product("TV", 1000.0, "Electronics"),
            Product("Book", 700.0, "Books")
        )
        val total = calculateTotalElectronicsPriceOver500(products)
        assertEquals(1600.0, total, 0.001, "Sum of Electronics >500 should be 1600.0")
    }

    @Test
    fun `test countElectronicsOver500`() {
        val products = listOf(
            Product("Laptop", 600.0, "Electronics"),
            Product("Mouse", 50.0, "Electronics"),
            Product("TV", 1000.0, "Electronics"),
            Product("Headphones", 550.0, "Electronics"),
            Product("Book", 700.0, "Books")
        )
        val count = countElectronicsOver500(products)
        assertEquals(3, count, "There should be 3 Electronics items over 500")
    }
}



// --- Tests for Workshop #1: Unit Converter End ---

// --- Tests for Workshop #2: Data Analysis Pipeline ---
// ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå Workshop2.kt ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
// ‡πÄ‡∏ä‡πà‡∏ô ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ > 500 ‡∏ö‡∏≤‡∏ó
// ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ calculateTotalElectronicsPriceOver500 ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö List<Product> ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Double
// ‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô test cases ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ > 500 ‡∏ö‡∏≤‡∏ó
// üö®

// ‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô test cases ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î 'Electronics' ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 500 ‡∏ö‡∏≤‡∏ó
// üö®


//